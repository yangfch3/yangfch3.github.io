<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FuChee&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangfch3.com/"/>
  <updated>2017-10-30T07:12:48.172Z</updated>
  <id>http://yangfch3.com/</id>
  
  <author>
    <name>FuChee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web 缓存及策略制定</title>
    <link href="http://yangfch3.com/2017/10/19/HTTP-Cache/"/>
    <id>http://yangfch3.com/2017/10/19/HTTP-Cache/</id>
    <published>2017-10-19T01:32:19.000Z</published>
    <updated>2017-10-30T07:12:48.172Z</updated>
    
    <content type="html"><![CDATA[<p>我们常常会注意到静态资源后面都跟着一串指纹码：<br><img src="http://static.zybuluo.com/yangfch3/8m3e3wnqpmxwhztq755quy1w/image_1b1c9hn2rcdv1jn7pav1gdtjs6m.png" alt="image_1b1c9hn2rcdv1jn7pav1gdtjs6m.png-20.6kB"><br><img src="http://static.zybuluo.com/yangfch3/kp4cmtg8o50i34lh501vlhf3/image_1b1c9gujm10snq8f947iv5t49.png" alt="image_1b1c9gujm10snq8f947iv5t49.png-28.4kB"><br><img src="http://static.zybuluo.com/yangfch3/s3aubu6l1ylr6igytpuv18y6/image_1b1c9jtvr1aogmd0seg1o0714lu13.png" alt="image_1b1c9jtvr1aogmd0seg1o0714lu13.png-15.8kB"><br><img src="http://static.zybuluo.com/yangfch3/44bhvo0c8c89lggd60uyyhqn/image_1b1c9of7qf6b1abfvmp1er12801g.png" alt="image_1b1c9of7qf6b1abfvmp1er12801g.png-17.2kB"></p><p>同时我们在进行网络请求分析时会遇到 Cache-Control、Last-Modified 等这些 Header 字段。</p><p>在冥冥中，我们知道这些肯定与缓存有着重大的关系。缓存机制中有哪些关键的东西在起作用，如何制定最优的 <strong>缓存-更新</strong> 机制就是本文需要研究的问题。</p><a id="more"></a><h2 id="前言">前言</h2><p>首先让我们来看一次经典的 <strong>请求-响应</strong> 过程，以 <a href="https://zhihu.com" target="_blank" rel="external">zhihu.com</a> 登录页的某个 JavaScript 资源为例：<br><img src="http://static.zybuluo.com/yangfch3/0gotv3wpms8o77advh2x4jqn/image_1b1cacu1n1b4019s61jo816fj5ud1t.png" alt="image_1b1cacu1n1b4019s61jo816fj5ud1t.png-586.8kB"></p><p>我们从这次连接中看到以下与缓存相关的 HTTP(s) 请求头/响应头：</p><ul><li>Request Header<ol><li>Cache-Control</li><li>If-Modified-Since</li><li>If-None-Match</li></ol></li><li>Response Header<ol><li>Cache-Control（图上没有体现）</li><li>Last-Modified</li><li>ETag</li></ol></li></ul><p>一般，我们请求的缓存就是由上述 HTTP Header 进行<strong>校验</strong>与<strong>控制</strong>。是否需要缓存？缓存层级？缓存多久？缓存到期后如何处理？这些问题就是接下来的文章需要解决的。</p><h2 id="etag-if-none-match">ETag &amp; If-None-Match</h2><p>ETag 我们可以很形象地称之为<strong>验证令牌</strong>，这个令牌在<strong>缓存不符合我们的 Cache-Control 指定的规则</strong> 时起作用。</p><p>ETag 由服务器生成，由 Response Header 携带传送给客户端进行保存，客户端请求 Request Header 通过 If-None-Match 携带缓存的 ETag 值给服务器进行校验。</p><blockquote><p>ETag 是 Response Header 的字段，If-None-Match 是 Request Header 的字段，因为二者功能协作且字段值一致，下面统一用 ETag 代替。</p></blockquote><p>假如我们有如下静态资源，请求细节如下：<br><img src="http://static.zybuluo.com/yangfch3/95pdeafw683dqhtwj8ymhnpp/image_1b1cbv67c17de1kdb16rce9mtk2a.png" alt="image_1b1cbv67c17de1kdb16rce9mtk2a.png-18.4kB"></p><p>现在过了 120 秒，浏览器又对该资源发起了请求。</p><p>首先，浏览器会检查本地缓存并找到之前的响应，不幸的是，这个响应缓存的文件现在已经“过期”，不能直接使用。此时，浏览器可以直接发出新请求，获取新的完整响应，<strong>但是这样做效率较低，因为如果本地缓存已过期，但服务器上资源在此期间未被更改过，我们就没有理由再去下载一遍</strong>。</p><p>这就是 ETag 头中指定的验证令牌所要解决的<em>问题</em><sup>1</sup>：服务器会生成并返回一个随机令牌，通常是文件内容的哈希值或者某个其他指纹码（具体实现细节由服务器决定）。客户端不必了解指纹码是如何生成的，只需要在下一个请求中将其（通过 If-None-Match 携带）发送给服务器：如果指纹码仍然一致，说明资源未被修改，我们就可以跳过下载，继续延长 Cache-Control（120s）。</p><blockquote><p>1：如果资源未被更改过，我们就没有理由再去下载与客户端缓存中已有的完全相同的资源。</p></blockquote><p>总结以上内容就是：</p><ol><li>ETag 在缓存过期（过了 Cache-Control 指定期限）之后起作用的</li><li>ETag 在缓存过期后判定是对缓存<strong>续命</strong>还是<strong>更新</strong></li></ol><h2 id="last-modified-if-modified-since">Last-Modified &amp; If-Modified-Since</h2><p>其实在 ETag 出现之前，就有了 Last-Modified/If-Modified-Since 验证机制。使用资源的最近一次更新时间（Last-Modified）进行校验是最符合我们日常认知的，也是最容易想到的一种方式。</p><blockquote><p>Last-Modified 是 Response Header 的字段<br>If-Modified-Since 是 Request Header 的字段</p></blockquote><p>ETag 的出现是对 Last-Modified 机制的补充与严谨化。</p><ul><li>Last-Modified 标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间</li><li>如果某些文件会被定期生成，当有时内容并没有任何变化，但 Last-Modified 却改变了，导致文件没法使用缓存（而 ETag 是依据文件内容特征生成的指纹，能更精确地表示文件有无变化）</li><li>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</li></ul><p>Last-Modified 与 ETag 一起使用时，服务器会<strong>优先验证 ETag</strong>，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。</p><h2 id="cache-control">Cache-Control</h2><p><code>Cache-Control</code> 有一个比较特殊的点：Request Header 有此字段，Response Header 也有这个字段。</p><h3 id="max-age-num">max-age=[num]</h3><p>服务器返回头 Cache-Control 的 max-age 告诉客户端：<strong>此资源在客户端缓存时间为多久</strong>。</p><p>而比较特殊的 max-age=0 则相当于告知客户端：<strong>此资源刻意缓存在客户端，但每次重新请求都应该向服务器请求校验</strong>。</p><ol><li>服务器首次返回一个 max-age=0 的静态资源，客户端缓存到本地</li><li>客户端需要重新请求此静态资源时，发现本地有缓存，但是缓存已过期（因为 max-age=0）</li><li>客户端重新发送请求，携带 If-None-Match 头以及 max-age=0</li><li>服务端将收到的 If-None-Match 与文件的 ETag 比对</li><li>如果比对不一致，则下发静态资源，同时返回 Cache-Control 头和新的 ETag，客户端比对本地的 ETag 与返回的 ETag 后使用新的资源，并回到步骤 1</li><li>如果比对一致，则不下发返回静态资源，同时返回 Cache-Control 头和没变的 ETag，客户端比对本地的 ETag 与返回的 ETag 后直接使用缓存</li></ol><h3 id="no-cache">no-cache</h3><p>Response Header 的 no-cache 和 max-age=0 作用你可以将其等同起来。</p><p><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#no-cacheno-store" target="_blank" rel="external">链接1</a><br><a href="https://stackoverflow.com/questions/1046966/whats-the-difference-between-cache-control-max-age-0-and-no-cache" target="_blank" rel="external">链接2</a></p><ol><li>no-cache 不代表禁止客户端缓存</li><li>no-cache 不是不缓存，而是不直接使用缓存（需要验证）</li></ol><blockquote><p>I believe max-age=0 simply tells caches (and user agents) the response is stale from the get-go and so they SHOULD revalidate the response (eg. with the If-Not-Modified header) before using a cached copy, whereas, no-cache tells them they MUST revalidate before using a cached copy.</p></blockquote><p><code>Cache-Control: max-age=0</code> 与 <code>Cache-Control: no-cache</code> 可能存在的不同点是：可能在点击浏览器的前进后退按钮时会存在差异。<code>Cache-Control: max-age=0</code> 可以直接使用，而 <code>Cache-Control: no-cache</code> 则会验证。</p><p>还有一个问题时，在某些版本的浏览器下，客户端对 no-cache 与 no-store 的处理是一样的：都是直接不缓存。</p><p>no-cache 在 Request Header 的作用则比较简单：告诉服务器，本地没有缓存或不使用缓存，你需要给我最新的文件。Chrome 下的强制刷新以及 Disable Cache 采取的就是在 Request Header 使用 no-cache。</p><h3 id="no-store">no-store</h3><p><code>Cache-Control: no-store</code> 直接禁止浏览器和所有中继缓存存储返回的任何版本的响应 - 例如：一个包含个人隐私数据或银行数据的响应。每次用户请求该资源时，都会向服务器发送一个请求，每次都会下载完整的响应。</p><h3 id="public-private">public &amp; private</h3><p>服务器返回的 Cache-Control Header 如果有 public 字段，则表示可以多级缓存（用户代理、CDN、服务提供商）。</p><p>private 则表示单用户缓存，不允许任何中继缓存对其进行缓存 - 例如，用户浏览器可以缓存包含用户私人信息的 HTML 网页，但是中间服务商不能缓存。</p><h2 id="实例：express-req-fresh-的判定机制">实例：Express req.fresh 的判定机制</h2><p>Express 中 req.fresh 用于判定客户端的请求是否是“新鲜”的请求（而不是对已缓存资源的请求），只有当请求头的 <code>cache-control</code> 不等于 <code>no-cache</code> 并且满足以下任意一条才表示客户端的请求是“新鲜”的（即服务器需要提供新资源）：</p><blockquote><ul><li>指定了 <code>if-modified-since</code> 请求头并且 <code>last-modified</code> 请求头等于或时间上早于 <code>modified</code> 响应头</li><li><code>if-none-match</code> 请求头是 <code>*</code></li><li><code>if-none-match</code> 请求头无法匹配响应头的 <code>etag</code></li></ul></blockquote><h2 id="http-caching-最佳实践">HTTP Caching 最佳实践</h2><p><img src="http://static.zybuluo.com/yangfch3/jwinkxrha3w4bkgq59kgr89f/image_1b1ciceslctp1ho2ib1rvf1evj2n.png" alt="image_1b1ciceslctp1ho2ib1rvf1evj2n.png-47.8kB"></p><h2 id="缓存与频繁更新的矛盾">缓存与频繁更新的矛盾</h2><p>有些资源是需要频繁更新的，但是我们又确实希望客户端对其进行缓存。此时我们就需要<strong>针对我们资源的特性制定不同的缓存策略与缓存级别</strong>，并使用<strong>资源指纹 URL</strong>搭配实现资源的随意更新。</p><p>于是我们可以看回本文开始部分介绍的几个典型网站静态资源的指纹URL案例：</p><ol><li>index.xxxxxxx.js</li><li>index$xxxxxx.js</li><li>index-xxxxxxx.js</li><li>/index.js?x.x.x</li></ol><p>上面的 <code>x</code> 即为指纹区，选择何种指纹视项目与团队规范而定。</p><p><strong>指纹 URL + Cache-Control</strong> 实现缓存与更新的精细控制案例：<br><img src="http://static.zybuluo.com/yangfch3/0achbqbncuy3hdfar6l5thm7/image_1b1cj198v4itmue1ishdsecbj34.png" alt="image_1b1cj198v4itmue1ishdsecbj34.png-29.7kB"></p><p>分析一下上面的例子：</p><ul><li>HTML 被标记成 <code>no-cache</code>（或 <code>max-age=0</code>），这意味着浏览器在每次请求时都会重新验证文档，如果内容更改，会获取最新版本。同时，在 HTML 标记中，我们<strong>在 CSS 和 JavaScript 资源的网址中嵌入指纹码</strong>：如果这些文件的内容更改，网页的 HTML 也会随之更改，并将下载 HTML 响应的新副本。</li><li>允许浏览器和中继缓存（例如 CDN）缓存 CSS，过期时间设置为 1 年。注意，我们可以放心地使用 1 年的“远期过期”，因为我们在文件名中嵌入了文件指纹码：如果 CSS 更新，网址也会随之更改。</li><li>JavaScript 过期时间也设置为 1 年，但是被标记为 private，<strong>也许是因为包含了 CDN 不应缓存的一些用户私人数据</strong>。</li><li>缓存图片时不包含版本或唯一指纹码（一般项目中也会包含指纹码），过期时间设置为 1 天。</li></ul><p>组合使用 <code>ETag</code>、<code>Cache-Control</code> 和唯一网址（指纹 URL），我们可以提供最佳的方案：<strong>较长的过期时间，控制可以缓存响应的位置，以及按需更新。</strong></p><h2 id="注意点">注意点</h2><ol><li><p>网址区分大小写</p></li><li><p>除了文中提到的这些 Header 字段，服务器还可以自己制定与实现一些辅助缓存机制的字段。如：<code>X-Cache</code> 这样。</p></li><li><p>如果在应用中使用 Webview 来获取和显示网页内容，可能需要提供额外的配置标志，以确保启用了 HTTP 缓存，并根据用途设置了合理的缓存大小，同时，确保缓存持久化。查看平台文档并确认您的设置！</p><blockquote><p>例如在微信内 Webview 的缓存就有一些比较特殊的地方，具体可阅读开发文档。</p></blockquote></li><li><p>在很多情况下我们还会在响应 Header 内遇到 Expires 字段，这是 HTTP 1.0 时的标准，主要是为了兼容较为老旧的浏览器。在 HTTP 1.1 中定义了 Cache-Control 代替 Expires。</p></li></ol><hr><p>参考资料：<br><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="external">Google: Web Fundamentals - HTTP Caching</a><br><a href="http://stackoverflow.com/questions/1046966/whats-the-difference-between-cache-control-max-age-0-and-no-cache" target="_blank" rel="external">What’s the difference between Cache-Control: max-age=0 and no-cache?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常常会注意到静态资源后面都跟着一串指纹码：&lt;br&gt;
&lt;img src=&quot;http://static.zybuluo.com/yangfch3/8m3e3wnqpmxwhztq755quy1w/image_1b1c9hn2rcdv1jn7pav1gdtjs6m.png&quot; alt=&quot;image_1b1c9hn2rcdv1jn7pav1gdtjs6m.png-20.6kB&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://static.zybuluo.com/yangfch3/kp4cmtg8o50i34lh501vlhf3/image_1b1c9gujm10snq8f947iv5t49.png&quot; alt=&quot;image_1b1c9gujm10snq8f947iv5t49.png-28.4kB&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://static.zybuluo.com/yangfch3/s3aubu6l1ylr6igytpuv18y6/image_1b1c9jtvr1aogmd0seg1o0714lu13.png&quot; alt=&quot;image_1b1c9jtvr1aogmd0seg1o0714lu13.png-15.8kB&quot;&gt;&lt;br&gt;
&lt;img src=&quot;http://static.zybuluo.com/yangfch3/44bhvo0c8c89lggd60uyyhqn/image_1b1c9of7qf6b1abfvmp1er12801g.png&quot; alt=&quot;image_1b1c9of7qf6b1abfvmp1er12801g.png-17.2kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时我们在进行网络请求分析时会遇到 Cache-Control、Last-Modified 等这些 Header 字段。&lt;/p&gt;
&lt;p&gt;在冥冥中，我们知道这些肯定与缓存有着重大的关系。缓存机制中有哪些关键的东西在起作用，如何制定最优的 &lt;strong&gt;缓存-更新&lt;/strong&gt; 机制就是本文需要研究的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yangfch3.com/categories/HTTP/"/>
    
    
      <category term="BE" scheme="http://yangfch3.com/tags/BE/"/>
    
      <category term="HTTP" scheme="http://yangfch3.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>断舍离</title>
    <link href="http://yangfch3.com/2017/09/21/new-beginning/"/>
    <id>http://yangfch3.com/2017/09/21/new-beginning/</id>
    <published>2017-09-21T06:09:09.000Z</published>
    <updated>2017-09-21T06:11:17.763Z</updated>
    
    <content type="html"><![CDATA[<p>Null</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Null&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
